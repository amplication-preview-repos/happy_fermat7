/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { BotUser } from "./BotUser";
import { BotUserCountArgs } from "./BotUserCountArgs";
import { BotUserFindManyArgs } from "./BotUserFindManyArgs";
import { BotUserFindUniqueArgs } from "./BotUserFindUniqueArgs";
import { CreateBotUserArgs } from "./CreateBotUserArgs";
import { UpdateBotUserArgs } from "./UpdateBotUserArgs";
import { DeleteBotUserArgs } from "./DeleteBotUserArgs";
import { MessageFindManyArgs } from "../../message/base/MessageFindManyArgs";
import { Message } from "../../message/base/Message";
import { BotUserService } from "../botUser.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BotUser)
export class BotUserResolverBase {
  constructor(
    protected readonly service: BotUserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BotUser",
    action: "read",
    possession: "any",
  })
  async _botUsersMeta(
    @graphql.Args() args: BotUserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BotUser])
  @nestAccessControl.UseRoles({
    resource: "BotUser",
    action: "read",
    possession: "any",
  })
  async botUsers(
    @graphql.Args() args: BotUserFindManyArgs
  ): Promise<BotUser[]> {
    return this.service.botUsers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BotUser, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BotUser",
    action: "read",
    possession: "own",
  })
  async botUser(
    @graphql.Args() args: BotUserFindUniqueArgs
  ): Promise<BotUser | null> {
    const result = await this.service.botUser(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BotUser)
  @nestAccessControl.UseRoles({
    resource: "BotUser",
    action: "create",
    possession: "any",
  })
  async createBotUser(
    @graphql.Args() args: CreateBotUserArgs
  ): Promise<BotUser> {
    return await this.service.createBotUser({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BotUser)
  @nestAccessControl.UseRoles({
    resource: "BotUser",
    action: "update",
    possession: "any",
  })
  async updateBotUser(
    @graphql.Args() args: UpdateBotUserArgs
  ): Promise<BotUser | null> {
    try {
      return await this.service.updateBotUser({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BotUser)
  @nestAccessControl.UseRoles({
    resource: "BotUser",
    action: "delete",
    possession: "any",
  })
  async deleteBotUser(
    @graphql.Args() args: DeleteBotUserArgs
  ): Promise<BotUser | null> {
    try {
      return await this.service.deleteBotUser(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Message], { name: "messages" })
  @nestAccessControl.UseRoles({
    resource: "Message",
    action: "read",
    possession: "any",
  })
  async findMessages(
    @graphql.Parent() parent: BotUser,
    @graphql.Args() args: MessageFindManyArgs
  ): Promise<Message[]> {
    const results = await this.service.findMessages(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
