/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BotUser as PrismaBotUser,
  Message as PrismaMessage,
} from "@prisma/client";

export class BotUserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BotUserCountArgs, "select">): Promise<number> {
    return this.prisma.botUser.count(args);
  }

  async botUsers(args: Prisma.BotUserFindManyArgs): Promise<PrismaBotUser[]> {
    return this.prisma.botUser.findMany(args);
  }
  async botUser(
    args: Prisma.BotUserFindUniqueArgs
  ): Promise<PrismaBotUser | null> {
    return this.prisma.botUser.findUnique(args);
  }
  async createBotUser(args: Prisma.BotUserCreateArgs): Promise<PrismaBotUser> {
    return this.prisma.botUser.create(args);
  }
  async updateBotUser(args: Prisma.BotUserUpdateArgs): Promise<PrismaBotUser> {
    return this.prisma.botUser.update(args);
  }
  async deleteBotUser(args: Prisma.BotUserDeleteArgs): Promise<PrismaBotUser> {
    return this.prisma.botUser.delete(args);
  }

  async findMessages(
    parentId: string,
    args: Prisma.MessageFindManyArgs
  ): Promise<PrismaMessage[]> {
    return this.prisma.botUser
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .messages(args);
  }
}
